<apex:page standardStylesheets="true" 
		   showHeader="true" 
		   sidebar="true"
		   id="pg"
		   controller="SchemaExtractorController" 
		   cache="false">
  	<script>
	/**
	 * This function is called when the form is submitted
	 *
	 * This is a workaround to retrieve the values from the custom multi select
	 * picklist fields for the PM and RF products
	 */
	function makeSelectionSubmit() {
	  	var pmObj = document.getElementById('pg:frm:blk:basic:sObjectList');
	  	setMultiSelectValues(pmObj,'pg:frm:blk:hdnsObjectSelection');
	    return true;
  	}
  
   
	/**
	 * This function retrieves the selectd values of a select list
	 *
	 * This is a workaround to retrieve the values from the custom multi select
	 * picklist fields for the PM and RF products
	 */
  	function setMultiSelectValues(oSelect, hdn) {
	     var selectedArr = [];
	     var index=0;
	     for(var i = 0; i < oSelect.options.length;i++) {
		     if(oSelect.options[i].selected) {
		       	selectedArr[index] = oSelect.options[i].value;
		       	++index;
		     }
	     }
	     var selections = selectedArr.join(";");
	     var hdnObj = document.getElementById(hdn);
	     hdnObj.value = selections;     
  	}

	 function setupMultiSelectList(prefixId, componentId) {
		var elementIndex;
		var selectElement = document.getElementsByTagName("select");
		for(var i=0; i<selectElement.length; i++) {
			if (selectElement[i].className.indexOf('idwa_' + prefixId) == 0) { 
				selectElement[i].id = componentId + selectElement[i].className.substring(selectElement[i].className.lastIndexOf('_'));
				selectElement[i].name = componentId + selectElement[i].className.substring(selectElement[i].className.lastIndexOf('_'));
				elementIndex = selectElement[i].length-1;
				selectElement[i].options[elementIndex] = null;
				selectElement[i].options[0] = null;
			} else {
				if (selectElement[i].className.indexOf('idwah_' + prefixId) == 0) { 
					selectElement[i].id=componentId;
					selectElement[i].name=componentId;
				}
			}
		} 
	}
  	</script> 
    <apex:form id="frm" onsubmit="return makeSelectionSubmit();">
	  	<apex:pageBlock id="blk" title="Schema Extractor" mode="edit">
	    	<apex:pageBlockButtons >
	      		<apex:commandButton action="{!processExtractor}"  value="Submit" />
	   		</apex:pageBlockButtons>
        	<apex:inputhidden id="hdnsObjectSelection" value="{!strsObjectsToExtract}"  />
			<apex:outPutPanel id="errorPageMessages" >
				<apex:pageMessages />
			</apex:outPutPanel>
	 		<apex:pageBlockSection id="basic" title="Define Schema Extraction Properties" columns="1">       
	        	<apex:pageBlockSectionItem id="documentTitleId">	        	
	        		<apex:outputLabel value="Schema Extractor"/>
					<apex:outputPanel styleClass="requiredInput" layout="block">
					    <apex:outputPanel styleClass="requiredBlock" layout="block"/>
					    <apex:inputText value="{!documentTitle}" id="documentTitleField" required="true"/>
					</apex:outputPanel>
	        	</apex:pageBlockSectionItem>
	        	<apex:pageBlockSectionItem id="documentVersionId">	        	
	        		<apex:outputLabel value="Version"/>
	        		<apex:inputText value="{!documentVersion}" id="documentVersionField" required="true"/>
	        	</apex:pageBlockSectionItem>
	        	<apex:pageBlockSectionItem id="fileNameId">	        	
	        		<apex:outputLabel value="File Name"/>
					<apex:outputPanel styleClass="requiredInput" layout="block">
					    <apex:outputPanel styleClass="requiredBlock" layout="block"/>
	        			<apex:inputText value="{!fileName}" id="fieldNameField" required="true"/>
	        		</apex:outputPanel>
	        	</apex:pageBlockSectionItem>
	        	<apex:pageBlockSectionItem id="extractFormat"> 
	        		<apex:outputLabel value="Format Options"/>
        			<apex:selectList value="{!extractorFormat}">
        				<apex:selectOptions value="{!availableFormatOptions}"/>
        			</apex:selectList>
        		</apex:pageBlockSectionItem>    
			    <apex:pageBlockSectionItem /> 
			    <apex:pageBlockSectionItem dataStyleClass="sObjectList">
			          <apex:outputLabel value="SObject List"/>
			          <apex:outputPanel id="sObjectListPanel">
			 	      <c:SFDCMultiSelectList a_optionList="{!availableSObjects}"
										     selectedValues="{!sObjectsToExtract}" 	
										     required="true"
										     size="20"
										     width="200"
										     prefixId="sObjectList" 
										     blockSectionId="sObjectList"
										     componentId="pg:frm:blk:basic:sObjectList" />
	 				 </apex:outputPanel> 
				</apex:pageBlockSectionItem>
			    
			</apex:pageBlockSection>
	 		<apex:pageBlockSection id="schemaOptions" title="Define Schema Extraction Options" columns="1">
	 			<apex:outputPanel id="excelOptionPanel" rendered="{!IF(extractorFormat == 'Microsoft Excel',true, false)}">
	 				<apex:inputCheckbox value="{!isApiNameSortEnabled}"/>Sort by API Name}<br/>
	 				<apex:inputCheckbox value="{!isNonUpdatableFieldsEnabled}"/>Include Non Updatable Fileds<br/>
	 				<apex:inputCheckbox value="{!isPicklistValueDisplayEnabled}"/>Include Picklist Values<br/>
	 		  	</apex:outputPanel>
	 			<apex:outputPanel id="wordOptionPanel" rendered="{!IF(extractorFormat == 'Microsoft Word',true, false)}">
	 				<apex:inputCheckbox value="{!isNonUpdatableFieldsEnabled}"/>	 				
	 		  	</apex:outputPanel>
	 		</apex:pageBlockSection>
	 	</apex:pageBlock>     
    </apex:form> 
    <script>
    	var sObjectUnselected = getElementByIdCS('j_id0:j_id1:blk:basic:sObjectList:sObject_unselected'); 
 		sObjectUnselected.remove(sObjectUnselected.length-1);
 		sObjectUnselected.remove(0);
  
    	var sObjectSelected = getElementByIdCS('j_id0:j_id1:blk:basic:sObjectList:sObject_selected'); 
 		sObjectSelected.remove(sObjectSelected.length-1);
 		sObjectSelected.remove(0);
 		
 		function multiPickListMoveRight(componentName) {
 			var available = getElementByIdCS(componentName + '_unselected');
 			var toExtract = getElementByIdCS(componentName + '_selected');
  			for (i=0; i<available.length; i++) {
	    			if (available.options[i].selected) {
	      				toExtract.add(available.options[i]);
	      				break;
	      		}
	    		}
  		}
 		function multiPickListMoveLeft(componentName) {
 			var available = getElementByIdCS(componentName + '_unselected');
 			var availableGroup = available.children[0];
 			var toExtract = getElementByIdCS(componentName + '_selected');
  			for (i=0; i<toExtract.length; i++) {
	    			if (toExtract.options[i].selected) {
	      				availableGroup.appendChild(toExtract.options[i]);
	       				break;
	      		}
	    		}
	    		sortSelect(availableGroup);
	    		return false;
 		}
 		function sortSelect(optionCollection) {
                var tmpAry = new Array();
                for (var i=0;i<optionCollection.childElementCount;i++) {
					tmpAry[i] = new Array(); 
                    tmpAry[i][1] = new Option(optionCollection.children[i].text, optionCollection.children[i].value);
					tmpAry[i][0] = tmpAry[i][1].text;
                }
                tmpAry.sort();
                while (optionCollection.hasChildNodes()) {
                    optionCollection.removeChild(optionCollection.firstChild);
                }
                for (var i=0;i<tmpAry.length;i++) {
                    optionCollection.appendChild(tmpAry[i][1]);
                }
        }	
		function multiPickListMoveUp(selectId) {
			var selectList = document.getElementById(selectId);
		 	var selectOptions = selectList.getElementsByTagName('option');
		 	for (var i = 1; i < selectOptions.length; i++) {
		  		var opt = selectOptions[i];
		  		if (opt.selected) {
		   			selectList.removeChild(opt);
		   			selectList.insertBefore(opt, selectOptions[i - 1]);
		     	}
		    }
		}	
		function multiPickListMoveDown(selectId) {
		 	var selectList = document.getElementById(selectId);
		 	var selectOptions = selectList.getElementsByTagName('option');
		 	for (var i = selectOptions.length - 2; i >= 0; i--) {
		  		var opt = selectOptions[i];
		  		if (opt.selected) {
		   			var nextOpt = selectOptions[i + 1];
		   			opt = selectList.removeChild(opt);
		   			nextOpt = selectList.replaceChild(opt, nextOpt);
		   			selectList.insertBefore(nextOpt, opt);
		     	}
		    }
		    var nextOpt = selectOptions[i + 1]; 
		    selectList.removeChild(nextOpt );
			selectList.insertBefore(nextOpt , selectOptions[i]);
		}		

    </script>
</apex:page>